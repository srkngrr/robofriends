{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","src","alt","CardList","robotsInCard","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","robots","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","resp","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.47548552.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div> \n\t);\n};\n\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = ({id, name, email}) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n};\n\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robotsInCard}) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobotsInCard.map((user,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robotsInCard[i].id} \n\t\t\t\t\t\t\tname={robotsInCard[i].name} \n\t\t\t\t\t\t\temail={robotsInCard[i].email} \n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div> \n\t);\n};\n\n\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height:'500px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n};\n\n\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender() {\n\t\tif(this.state.hasError) {\n\t\t\treturn <h1>Ooopps. That`s not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n};\n\n\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport { connect } from 'react-redux'\nimport SearchBox from '../components/SearchBox'\nimport CardList from '../components/CardList'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css'\n\nimport  { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = (state) => {  // Connecting State from Reducers to Props - Props is searchField\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => { // Connecting Action From Actions to Props - Props is onSearchChange\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots()\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange , robots , isPending } = this.props // We declared them in mapStateToProps, mapDispatchToProps\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t})\n\t\treturn isPending ? <h1>Loading</h1> :\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t \t\t<CardList robotsInCard={filteredRobots}/>\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div> \n\t\t);\n\t}\n\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import { \n\tCHANGE_SEARCH_FIELD, \n\tREQUEST_ROBOTS_PENDING, \n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n\nexport const setSearchField = (text) => ({ //returns object\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => { //not returning object\n\tdispatch({ type: REQUEST_ROBOTS_PENDING })\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(resp => resp.json())\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD, \n\tREQUEST_ROBOTS_PENDING, \n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\n// Reducer\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload} ) // {...state, searchField: action.payload }\n\t\tdefault:\n\t\t\treturn state\t\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true })\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers  } from 'redux';\nimport { createLogger } from 'redux-logger'; // you can log your actions\nimport thunkMiddleware from 'redux-thunk' // handling async actions\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons';\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)) // you can log your actions\n\nReactDOM.render(\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}